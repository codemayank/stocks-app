{"version":3,"sources":["Components/ColorModSwitch/ColorModeSwitch.tsx","utils/StockDataUtil.ts","theme.ts","Components/StockStat/StockStat.tsx","reducers/stockDataReducer.ts","App.tsx","config/constants.ts","reportWebVitals.ts","index.tsx"],"names":["ColorModeSwitch","useColorMode","colorMode","toggleColorMode","colorScheme","variant","size","onClick","PriceChange","CustomTheme","theme","colors","bgColorMain","priceIncrease","green","priceDecrease","red","black","styles","global","props","bg","mode","color","StockStat","name","price","priceChange","priceChangePercent","bgIncrease","useColorModeValue","bgDecrease","minWidth","margin","padding","borderRadius","boxShadow","fontSize","boxSize","type","stockDataReducer","state","action","updatedStockData","currentStockData","forEach","value","key","has","currentData","get","newData","newValue","Math","abs","round","prevPrice","lastUpdateTime","dayjs","Increase","Decrease","NoChange","set","updateStockData","message","data","JSON","parse","reduce","formattedData","dataPt","ticker","tickerData","Map","App","useReducer","messageHistory","dispatch","useState","tickCounter","setTicker","useWebSocket","lastMessage","readyState","useEffect","updateMessageHistory","stockData","id","split","char","charCodeAt","push","sort","a","b","alignItems","direction","justifyContent","minHeight","width","p","columns","spacing","map","stock","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","extend","relativeTime","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bfa2d42.chunk.js","sourcesContent":["import { Button, useColorMode } from '@chakra-ui/core';\nimport React from 'react';\n\nexport function ColorModeSwitch(){\n  \n  const {colorMode, toggleColorMode} = useColorMode()\n  return <Button colorScheme=\"teal\" variant=\"outline\" size=\"sm\" onClick={toggleColorMode}>{`${colorMode === 'dark' ? 'Light' : 'Dark'} Mode`}</Button>\n}","import dayjs from 'dayjs';\n\nenum PriceChange {\n  Increase='increase',\n  Decrease='decrease',\n  NoChange='priceDefault'\n}\n\nfunction formatMessageData(message: MessageEvent){\n  \n  let formattedData = JSON.parse(message.data).reduce((formattedData: StockData, dataPt: [string, number] ) => {\n    let [ticker, price] = dataPt;\n    let tickerData: TickerData = {\n      price: Math.round(price * 100) / 100,\n      lastUpdateTime: dayjs()\n    }\n    formattedData.set(ticker, tickerData);\n    return formattedData\n  }, new Map<string, TickerData>())\n  return formattedData;\n}\n\nfunction updateStockData(updatedStockData: StockData | null, currentStockData: StockData | null){\n  if(!currentStockData){\n    return updatedStockData\n  }else{\n    updatedStockData?.forEach((value, key) => {\n        if(currentStockData?.has(key)){\n          let currentData = currentStockData.get(key) || {price: 0}\n          let newData = updatedStockData.get(key) || {price: 0}\n          let priceChange = newData.price - currentData.price\n          let priceChangePercent = (priceChange / currentData.price) * 100;\n          let newValue: any = {}\n          newValue.priceChangePercent = Math.abs(Math.round(priceChangePercent * 100) / 100);\n          newValue.price = newData.price;\n          newValue.prevPrice = currentData.price;\n          newValue = {...value, ...newValue}\n          newValue.lastUpdateTime = dayjs()\n          if(priceChange > 0){\n            newValue.priceChange = PriceChange.Increase\n          }else if(priceChange < 0){\n            newValue.priceChange = PriceChange.Decrease\n          }else{\n            newValue.priceChange = PriceChange.NoChange\n          }\n          if(priceChange !== 0){\n            currentStockData.set(key, newValue);\n          }\n        }else{\n          currentStockData.set(key, {...value, priceChange: PriceChange.NoChange, prevPrice: 0, priceChangePercent: 0})\n        }\n    })\n  }\n  \n  return currentStockData;\n\n}\n\nexport {formatMessageData, updateStockData}","import {theme} from '@chakra-ui/core';\nimport {mode} from '@chakra-ui/theme-tools';\n\nconst CustomTheme = {\n  ...theme,\n  colors: {\n    ...theme.colors,\n    bgColorMain: \"#fff\",\n    priceIncrease: theme.colors.green,\n    priceDecrease: theme.colors.red,\n    black: \"gray.600\"\n  },\n  styles: {\n    global: (props: any) => ({\n      \"html, body\": {\n        bg: mode(\"white\", \"gray.600\")(props),\n        color: mode(\"black\", \"white\")(props)\n      }\n    })\n  }\n}\n\nexport default CustomTheme;","import React, { FC } from 'react';\nimport { Stat, StatArrow, StatHelpText, StatLabel, StatNumber, useColorModeValue } from '@chakra-ui/core';\n\ntype statArrowProp = \"increase\" | \"decrease\" | undefined\n\ninterface props {\n  name: string;\n  price: number;\n  priceChange: statArrowProp;\n  priceChangePercent?: number ;\n\n}\n\nconst StockStat: FC<props> = ({name, price, priceChange, priceChangePercent}) => {\n  const bgIncrease = useColorModeValue(\"green.100\", \"green.300\")\n  const bgDecrease = useColorModeValue(\"red.100\", \"red.300\")\n  const bg = priceChange === 'increase' ? bgIncrease : bgDecrease\n  return (\n    <Stat\n      minWidth={[\"2.5rem\", \"2rem\"]}\n      margin=\"0.5em\"\n      padding=\"1em\"\n      borderRadius={[\"0.5em\", \"1em\"]}\n      boxShadow=\"xl\"\n      bg={priceChange ? bg : ''}\n    >\n      <StatLabel>{name}</StatLabel>\n      <StatNumber fontSize={[\"md\", \"2xl\"]}>{price}</StatNumber>\n      <StatHelpText fontSize={['xs', 'md']}>\n        <StatArrow boxSize={['2', '3']} type={priceChange} />\n        {`${priceChangePercent || 0}%`}\n      </StatHelpText>\n    </Stat>\n  );\n}\n\nexport default StockStat;","import { formatMessageData, updateStockData } from \"../utils/StockDataUtil\";\n\n\nfunction stockDataReducer(state: StockData | null, action: any ){\n  switch (action.type) {\n    case \"update\":\n      let updatedStockData = updateStockData(formatMessageData(action.data), state);\n      return updatedStockData ? new Map(updatedStockData) : state; \n    default:\n      return state\n  }\n}\n\nexport default stockDataReducer","import React, { useEffect, useReducer, useState } from 'react';\nimport './App.css';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nimport {ChakraProvider, Flex, Box, CSSReset, Heading, Spacer, SimpleGrid} from '@chakra-ui/core';\nimport { ColorModeSwitch } from './Components/ColorModSwitch/ColorModeSwitch';\n\nimport CustomTheme from './theme'\nimport StockStat from './Components/StockStat/StockStat';\nimport stockDataReducer from './reducers/stockDataReducer';\nimport { webSocketUrl } from './config/constants';\n\nfunction App() {\n  \n  const [messageHistory, dispatch] = useReducer(stockDataReducer, null)\n  const [tickCounter, setTicker] = useState<number>(0)\n  const {lastMessage, readyState} = useWebSocket(webSocketUrl)\n  \n  useEffect(() => {\n    if(lastMessage){\n      let updateMessageHistory = {\n        type: \"update\",\n        data: lastMessage\n      }\n      setTicker(tickCounter + 1)\n      dispatch(updateMessageHistory);\n    }    \n  }, [lastMessage])\n\n  let stockData: Array<StockDataDisplay | null> = [];\n  \n  messageHistory?.forEach((value: TickerData, key: string) => {\n    let id = key.split(\"\").reduce((id , char) => id + char.charCodeAt(0), 0)\n    let ticker = {\n      ticker: key,\n      value: value,\n      id  \n    }\n    stockData.push(ticker);\n  })\n\n  stockData.sort((a, b) => a && b ? a.id - b.id : 0);\n\n  \n  return (\n    <ChakraProvider theme={CustomTheme}>\n      <CSSReset />\n      <Flex\n        alignItems=\"center\"\n        direction={[\"column\", \"column\", \"column\", \"row\"]}\n        justifyContent={[\"flex-start\", \"flex-start\", \"flex-start\", \"space-around\"]}\n        minHeight=\"100vh\"\n      >\n        <Flex\n          direction={[\"row\", \"row\", \"row\", \"column\"]}\n          width={[\"100%\", \"100%\", \"100%\", \"40%\"]}\n          alignItems=\"center\"\n          justifyContent=\"space-around\"\n        >\n          <Box p=\"1rem 2rem\">\n            <Heading>Stock App</Heading>\n          </Box>\n          <Spacer />\n          <Box p=\"1rem 2rem\">\n            <ColorModeSwitch />\n          </Box>\n        </Flex>\n\n        <SimpleGrid columns={[3, 5]} spacing={1}>\n          {stockData.map(stock => stock ? (\n            <StockStat\n              name={stock.ticker}\n              price={stock.value.price}\n              priceChange={stock.value.priceChange}\n              priceChangePercent={stock.value.priceChangePercent}\n            />\n          ) : null)}\n        </SimpleGrid>\n      </Flex>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","export const webSocketUrl = \"ws://stocks.mnet.website\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\ndayjs.extend(relativeTime)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}